apply plugin: 'com.android.application'
apply plugin: 'newrelic'
apply plugin: 'de.felixschulze.gradle.hockeyapp'

ext {
    support="27.1.1"
}

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId 'com.INT.apps.Gpsspecial'
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 10
        versionName "1.8"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        releaseConfig {
            keyAlias "gps_special"
            keyPassword "KGgom35kv4qlo"
            storeFile file('gpsspecial_release.jks')
            storePassword "zUnStm4mOm!rt"
        }

        debugConfig {
            keyAlias "debug"
            keyPassword "gpsspecial007"
            storeFile file('gpsspecial.jks')
            storePassword "gpsspecial007"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debugConfig
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }
    }

    flavorDimensions "default"

    productFlavors {
        production {
            dimension "default"
            buildConfigField 'String', 'BASE_URL', '\"https://gpsspecial.com\"'
            buildConfigField 'String', 'STRIPE_PUB_KEY', '\"pk_live_5R6R0lRFfwmKUazBtj1K0kaY\"'
        }

        development {
            dimension "default"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            buildConfigField 'String', 'BASE_URL', '\"' + getSystemVar("TARGET_HOST", "https://demo-gps-aws.isdev.info/") + '\"'
            buildConfigField 'String', 'STRIPE_PUB_KEY', '\"pk_test_H53dEoWLsq3nfQr97WJK1Ulw\"'
        }
    }

    dependencies {
        implementation fileTree(include: ['*.jar'], dir: 'libs')
        implementation "com.android.support:design:$support"
        implementation "com.android.support:exifinterface:$support"
        implementation "com.android.support:animated-vector-drawable:$support"
        implementation "com.android.support:appcompat-v7:$support"
        implementation "com.android.support:support-v13:$support"
        implementation 'com.jakewharton:butterknife:6.1.0'
        implementation 'com.squareup:otto:1.3.6'
        implementation 'com.squareup.retrofit:retrofit:1.9.0'
        implementation 'com.squareup.picasso:picasso:2.71828'
        implementation 'com.google.android.gms:play-services-location:11.0.4'
        implementation 'com.google.android.gms:play-services-maps:11.0.4'
        implementation 'com.google.firebase:firebase-messaging:11.0.4'
        implementation('com.facebook.android:facebook-android-sdk:4.2.0') {
            exclude module: 'support-annotations'
            exclude module: 'support-v4'
        }
        implementation(project(':nexusdialog')) {
            exclude module: 'appcompat-v7'
            exclude module: 'support-v4'
            exclude module: 'support-v13'
        }
        implementation 'org.ocpsoft.prettytime:prettytime:4.0.0.Final'
        implementation 'com.squareup.okhttp:okhttp:2.5.0'
        implementation 'com.makeramen:roundedimageview:2.2.0'
        //Relic performace tool (22-9-2016)
        implementation 'com.newrelic.agent.android:android-agent:5.7.1'
        //SAQIB 23-3-2017(Clustering item)
        implementation 'com.google.maps.android:android-maps-utils:0.4'
        //For payments: STRIPE
        implementation 'com.stripe:stripe-android:5.0.0'
        //For QR scan
        implementation 'me.dm7.barcodescanner:zxing:1.9.8'
        //For phone validation
        implementation 'io.michaelrocks:libphonenumber-android:8.9.5'
        //For choose country (phone) code
        implementation ('com.github.joielechong:countrycodepicker:2.1.5') {
            exclude group: 'io.michaelrocks', module: 'libphonenumber-android'
        }
        //Localise SDK
        implementation 'com.lokalise.android:ota-sdk:1.3.3'
        //Log
        implementation 'com.jakewharton.timber:timber:4.7.0'
    }
}

project.afterEvaluate {
    android.applicationVariants.all { variant ->
        // create file where to copy
        def backupFolder = rootProject.file("app/build/outputs/apk/")

        variant.outputs.all { output ->
            Task copyAndRenameAPKTask = project.task("copyAndRename${variant.name.capitalize()}APK", type: Copy) {
                from output.outputFile.getParent()
                into backupFolder
                include output.outputFileName
            }

            // if copyAndRenameAPKTask needs to automatically execute assemble before
            copyAndRenameAPKTask.dependsOn(variant.assemble)
            copyAndRenameAPKTask.mustRunAfter(variant.assemble)

            // if assemble needs to automatically execute copyAndRenameAPKTask after
            variant.assemble.finalizedBy(copyAndRenameAPKTask)
        }
    }
}

hockeyapp {
    apiToken = "60763c2b92434e0897106bfdeaa72fa9"
    ownerId = "1350121"
    teamId = "84586"
    tags = "intellectsoft"
    restoreAllowed = true
    notes = generateChangeLog()
    buildServerUrl = System.getenv("JOB_URL") ?: "Unknown"
    repositoryUrl = System.getenv("GIT_URL") ?: "Unknown"
}

def generateChangeLog() {
    def changelog = "server url: "
    changelog += "  \nbranch: " + System.getenv("GIT_BRANCH") ?: "Unknown"
    changelog += "  \ncommit: " + System.getenv("GIT_COMMIT") ?: "Unknown"
    changelog += "  \n\njob name: " + System.getenv("JOB_NAME") ?: "Unknown"
    changelog += "  \nstarted by: " + System.getenv("BUILD_USER") ?: "Unknown"
    changelog += "  \nbuild number: " + System.getenv("BUILD_NUMBER") ?: "Unknown"
    println changelog
    return changelog
}

def getSystemVar(String key, String defaultValue) {
    def var = System.getenv(key)
    System.out.println("System: " + key + " - " + var)
    if (var == null) {
        var = getLocalPropertiesVar(key, defaultValue)
    }
    return var
}

def getLocalPropertiesVar(String key, String defaultValue) {
    def var = null
    Properties properties = new Properties()
    File localPropsFile = project.rootProject.file('local.properties');
    if (localPropsFile.exists() && localPropsFile.canRead()) {
        properties.load(localPropsFile.newDataInputStream())
        var = properties.getProperty(key)
        System.out.println("Local: " + key + " - " + var)
    } else {
        var = defaultValue
        System.out.println("Default: " + key + " - " + var)
    }
    if (var == null) {
        var = defaultValue
        System.out.println("Default: " + key + " - " + var)
    }
    return var
}
